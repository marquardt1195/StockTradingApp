@page "/results/plots"
@using Data;
@using Data.ViewModels;
@using Services;
@using StockTradingApp.Services.Interfaces;
@using System.Text.Json
@inject IResultService resultService
@inject ITradeService tradeService
@inject IJSRuntime JS

<style>
    .table-net {
        border-radius: 10px;
        padding: 10px;
        width: 60%;
        background-color: #EAECF1;
        text-align: center;
        margin: auto;
    }

    .line-chart {
        width: 45%;
    }

    .table-responsive {
        max-height: 285px;
    }

    .card-body {
        background-color: #F2F3F5;
    }

    .card-header {
        background-color: #3C404A;
        color: white;
    }

    plot-adjust {
        height: 50%;
    }
</style>


<div class=" row">
    <div class="col-sm-8">
        <div class="card">
            <div class="card-header">
                Cumulative $ Profit/Loss
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-8">
                        <canvas id="CumulativePnlPos"></canvas>
                        <canvas id="RecentlyClosedTrades"></canvas>
                    </div>
                    <div class="col-4 mt-4 table-responsive">
                        <table class="table table-hover table-striped table-net">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>$ P/L</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int tradeCount = 1;
                                }
                                @foreach (var trades in cumulativePnlPositionVM)
                                {
                                    <tr>
                                        <td>@tradeCount</td>
                                        <td class="fw-bold" style="color: @GetColor(trades.CumulativeDollarPnl)">@trades.CumulativeDollarPnl.ToString("C")</td>
                                    </tr>
                                    tradeCount++;
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




@code {

    public List<MonthlyResultViewModel> monthlyResultVM = new List<MonthlyResultViewModel>();

    public List<CumulativePnlPositionViewModel> cumulativePnlPositionVM = new List<CumulativePnlPositionViewModel>();

    public List<RecentlyClosedTradesViewModel> recentlyClosedTradesVM = new List<RecentlyClosedTradesViewModel>();

    public List<TradesWithPnlViewModel> tradesWithPnLVM = new List<TradesWithPnlViewModel>();

    protected override async Task OnInitializedAsync()
    {

        await LoadPlots();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ConfigureCharts();
            StateHasChanged(); // Trigger a re-render after SetChart
        }
    }

    // public async Task LoadMonthly()
    // {
    //     monthlyResultVM = await resultService.GetMonthlyTestResults();
    // }

    private async Task SetChart(string canvasId, string onAnimationComplete, string chartType, object chartData)
    {
        await JS.InvokeVoidAsync("createChart", new
        {
            canvasId,
            onAnimationComplete,
            chartType,
            chartData
        });
    }

    private async Task ConfigureCharts()
    {
        var cumLabels = cumulativePnlPositionVM.Select(x => x.ShareBuyDate.ToString("M"));

        var CumPnlData = new
        {
            labels = cumLabels,
            datasets = new object[]
            {
                new
                {
                    borderColor = "rgba(3, 96, 25, 0.8)",
                    backgroundColor = "rgba(160, 170, 193, 0.4)",
                    data = cumulativePnlPositionVM.Select(p => p.CumulativeDollarPnl)
                }
            },
        };
        await SetChart("CumulativePnlPos", "function", "line", CumPnlData);


        decimal binSize = 0.02m;

        var binCounts = tradesWithPnLVM
            .Where(t => t.PercentPnl.HasValue)
            .GroupBy(t => Math.Floor(t.PercentPnl.Value / binSize) * binSize)
            .OrderBy(g => g.Key)
            .Select(g => new { Bin = g.Key, Count = g.Count() });

        var labels = binCounts.Select(x => $"{x.Bin * 100}% - {(x.Bin + binSize) * 100}%");
        var data = binCounts.Select(x => x.Count);
        var barColors = binCounts.Select(x => x.Bin >= 0 ? "rgba(14, 169, 9, 0.8)" : "rgba(245, 39, 39, 0.8)");
        var formattedLabels = binCounts.Select(bc =>
        {
            var start = bc.Bin * 100;
            var end = (bc.Bin + binSize) * 100;
            return $"{start:N0}-{end:N0}%";
        });

        var PnlPercentPerTrade = new
        {
            labels = formattedLabels,
            datasets = new object[]
            {
                new
                {
                    //borderColor = "black",
                    backgroundColor = barColors,
                    data
                }
            }
        };
        await SetChart("RecentlyClosedTrades", "function", "bar", PnlPercentPerTrade);
    }

    private async Task LoadPlots()
    {
        cumulativePnlPositionVM = await tradeService.GetCumulativePnl();
        tradesWithPnLVM = await tradeService.GetTradesWithPnl();
        //recentlyClosedTradesVM = await tradeService.GetRecentlyClosed();

        StateHasChanged();
    }

    public string GetColor(decimal? value)
    {
        return value >= 0 ? "green" : "red";
    }

}
