@page "/results/plots"
@using Data;
@using Data.ViewModels;
@using Services;
@using StockTradingApp.Services.Interfaces;
@using System.Text.Json
@inject IResultService resultService
@inject ITradeService tradeService
@inject IJSRuntime JS

<style>
    .table-net {
        border-radius: 10px;
        padding: 10px;
        width: 60%;
        background-color: #EAECF1;
        text-align: center;
        margin: auto;
    }

    .line-chart {
        width: 45%;
    }
</style>


<div class=" row">
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header">
                Bar Chart
            </div>
            <div class="card-body">
                <canvas class="my-4 h-25" id="myChart1"></canvas>
            </div>
            <div class="card-body">
                <canvas class="my-4 h-25" id="myChart2"></canvas>
            </div>
        </div>
    </div>
</div>

<table class="table table-hover table-striped table-net">
    <thead>
        <tr>
            <th>TradeID</th>
            <th>$ Pnl</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trades in tradesWithPnlVM)
        {
            <tr>
                <td>@trades.TradeId</td>
                <td>@trades.DollarPnl</td>
            </tr>
        }
    </tbody>
</table>


@code {

    public List<MonthlyResultViewModel> monthlyResultVM = new List<MonthlyResultViewModel>();

    public List<TradesWithPnlViewModel> tradesWithPnlVM = new List<TradesWithPnlViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTradesWithPnl();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ConfigureCharts();
            StateHasChanged(); // Trigger a re-render after SetStock
        }
    }


    public async Task LoadMonthly()
    {
        monthlyResultVM = await resultService.GetMonthlyTestResults();
    }

    private async Task SetStock(string canvasId, string onAnimationComplete, string chartType, object chartData)
    {
        await JS.InvokeVoidAsync("createChart", new
        {
            canvasId,
            onAnimationComplete,
            chartType,
            chartData
        });
    }

    private async Task ConfigureCharts()
    {
        var chartData1 = new
        {
            labels = tradesWithPnlVM.Select(p => p.TradeId),
            datasets = new object[]
            {
                new
                {
                    borderColor = "#A0AAC1",
                    backgroundColor = "rgba(160, 170, 193, 0.2)",
                    data = tradesWithPnlVM.Select(p => p.DollarPnl)
                }
            }
        };
        await SetStock("myChart1", "function", "bar", chartData1);



        var chartData2 = new
        {
            labels = tradesWithPnlVM.Select(p => p.TradeId),
            datasets = new object[]
            {
                new
                {
                    borderColor = "#A0AAC1",
                    backgroundColor = "rgba(160, 170, 193, 0.2)",
                    data = tradesWithPnlVM.Select(p => p.PercentPnl)
                }
            }
        };
        await SetStock("myChart2", "function", "line", chartData2);
    }



    private async Task LoadTradesWithPnl()
    {
        tradesWithPnlVM = await tradeService.GetTradesWithPnl();
        StateHasChanged();
    }


}
