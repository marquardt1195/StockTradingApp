@page "/transactions"
@page "/transactionform/{pTransactionId:int?}"
@using Data
@using Services
@inject ITransactionService transactionService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext

<style>
    .table-responsive {
        max-height:300px;
    }
</style>

@if (transactionList.Any())
{
    @if (pTransactionId == null)
    {
        <a href="transactionform/0" class="btn btn-success" @onclick="OnAdd">Add Transaction</a>
        <div class="table-responsive">
            <table class="table table-striped table-hover table-responsive">
                <thead>
                    <tr>
                        <th>Transaction ID</th>
                        <th>Trade ID</th>
                        <th>Stock Symbol</th>
                        <th>Entry Price</th>
                        <th># Shares Entered</th>
                        <th>Entry Date</th>
                        <th>Exit Price</th>
                        <th># Shares Exited</th>
                        <th>Exit Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var trans in transactionList)
                    {
                        <tr>
                            <td>@trans.TransactionId</td>
                            <td>@trans.TradeId</td>
                            <td>@trans.StockSymbol</td>
                            <td>@trans.EntryPrice</td>
                            <td>@trans.NumberSharesEntered</td>
                            <td>@trans.EntryDate</td>
                            <td>@trans.SellPrice</td>
                            <td>@trans.NumberSharesExited</td>
                            <td>@trans.ExitDate</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="()=>OnEdit(trans.TransactionId)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => OnDelete(trans.TransactionId)">Delete</button>
                            </td>
                        </tr>
                    } 
                </tbody>
            </table>
        </div>
    }
    else
    {
        <h3>@title Transaction</h3>
        <div class="row">
            <div class="col-sm-2">
                <EditForm Model="transaction" OnValidSubmit="HandleNewSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
@*                     <div class="form-group">
                        <label for="TransactionId">Transaction Id</label>
                        <InputSelect class="form-control" @bind-Value="transaction.TransactionId">
                            @foreach(var item in transactionList)
                            {
                            <option value="@item.TransactionId">@item.TransactionId</option>
                            }
                        </InputSelect>
                    </div> *@
                    <div class="form-group">
                        <label for="TradeId">Trade Id</label>
                        <InputNumber class="form-control" @bind-Value="transaction.TradeId"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="StockSymbol">Stock Symbol</label>
                        <InputText class="form-control" @bind-Value="transaction.StockSymbol"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="EntryPrice">Entry Price</label>
                        <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="NumberSharesEntered">Number Shares Entered</label>
                        <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="EntryDate">Entry Date</label>
                        <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                    </div>
                    <div class="form-group">
                        <label for="SellPrice">Exit Price</label>
                        <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="NumberSharesExited">Number Shares Exited</label>
                        <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="ExitDate">Exit Date</label>
                        <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                    </div><br />
                    <button type="submit" class="btn-primary btn-sm">Update</button>
                </EditForm>
            </div>
        </div>
    }
}
else
{
    <div class="text-center">
        <img src="/images/smallLoading.gif">
    </div>
}

@code {
    [Parameter]
    public int? pTransactionId { get; set; }

    [Parameter]
    public int? pTradeId { get; set; }

    private bool NewTradeForm { get; set; } = false;

    public bool isLoading { get; set; } = true;

    private List<Transaction> transactionList = new List<Transaction>();

    public Transaction transaction { get; set; } = new Transaction();

    public string title = "Add";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadTransactions();
        }
    }

    private async Task LoadTransactions()
    {
        transactionList = await transactionService.GetAllTransactions();
        isLoading = false;
        StateHasChanged();
    }

    private void OnAdd()
    {
        // if (pTradeId == null || pTradeId == 0)
        // {
        //     NewTradeForm = true;
        //     title = "Add";
        //     pTradeId = GetLastTradeId();
        // }
        // transaction.TradeId = Convert.ToInt32(@pTradeId++);
        // transaction = new Transaction();

        transaction = new Transaction {TradeId = transaction.TradeId};
    }

    private async void OnDelete(int TransactionId)
    {
        transactionService.DeleteTransaction(TransactionId);
        transactionList = await transactionService.GetAllTransactions();
    }

    private void OnEdit(int pTransactionId)
    {
        if (pTransactionId > 0)
        {
            title = "Edit";
        }
        transaction = transactionService.GetTransactionById(pTransactionId);
        NavigationManager.NavigateTo($"/transactionform/{pTransactionId}");
    }

    // private async void HandleValidSubmit()
    // {
    //     if (transaction.TradeId == 0)
    //     {
    //         transactionService.AddTransaction(transaction);
    //     }
    //     else
    //     {
    //         transactionService.UpdateTransaction(transaction);
    //     }
    //     NavigationManager.NavigateTo("/transactions");
    //     dbContext.SaveChanges();
    //     transactionList = await transactionService.GetAllTransactions();
    // }

    private async void HandleNewSubmit()
    {
        if (transaction.TransactionId == 0 || transaction.TransactionId == null)
        {
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        NavigationManager.NavigateTo("/transactions");
        dbContext.SaveChanges();
        transactionList = await transactionService.GetAllTransactions();
    }

    private int GetLastTradeId()
    {
        if (transactionList.Count > 0)
        {
            int maxTradeId = transactionList.Max(transaction => transaction.TradeId);
            return maxTradeId;
        }
        else
        {
            return 0;
        }
    }

}
