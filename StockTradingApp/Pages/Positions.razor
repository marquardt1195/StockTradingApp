@page "/positions"
@using Data.ViewModels
@using Services
@using Services.Interfaces
@inject ITradeService tradeService

<style>
    .tableRound {
        border-radius: 10px;
        padding: 10px;
        width: 75%;
        background-color: #EAECF1;
        text-align: center;
    }

    .tableClosed {
        border-radius: 10px;
        padding: 10px;
        width: 60%;
        background-color: #EAECF1;
        text-align: center;
        margin: auto;
    }

    .closed-trades {
        width: 70%;
    }

    .positionPage {
        width: 80%;
    }

    .header-titles {
        color: white;
        text-align: center;
        width: 75%;
    }

    .title {
        color: white;
        text-align: center;
    }
</style>


@if(positionsVM.Any() || recentlyClosedTradesVM.Any())
{
<div class="positionPage ">
    <h2 class="header-titles">Open Positions</h2>
    <table class="table table-hover table-striped tableRound">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Posn %</th>
                <th>Qty</th>
                <th>Cost Basis</th>
                <th>$ Stop</th>
                <th>% Stop</th>
                <th>Risk</th>
                <th>1R</th>
                <th>2R</th>
                <th>3R</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in positionsVM)
            {
                <tr>
                    <td class="fw-bold">@p.StockSymbol</td>
                    <td>@p.PositionSize.ToString("P")</td>
                    <td>@p.Quantity</td>
                    <td>@p.CostBasis.ToString("C")</td>
                    <td>@p.DollarStopLoss.ToString("C")</td>
                    <td>@p.PercentStopLoss.ToString("P")</td>
                    <td class="fw-bold" style="color: #D96658"> @p.Risk.ToString("C")</td>
                    <td class="fw-bold" style="color: #B9990C">@p.OneRisk.ToString("C")</td>
                    <td class="fw-bold" style="color: #B9990C">@p.TwoRisk.ToString("C")</td>
                    <td class="fw-bold" style="color: #B9990C">@p.ThreeRisk.ToString("C")</td>
                </tr>
            }
            <tr>
                <td class="fw-bold">Total</td>
                <td class ="fw-bold">@positionsVM.Sum(p => p.PositionSize).ToString("P")</td>
                <td></td>
                <td></td>
                <td></td>
                <td class="fw-bold">@positionsVM.Average(p => p.PercentStopLoss).ToString("P")</td>
                <td class="fw-bold">@positionsVM.Sum(p => p.Risk).ToString("C")</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
    <div class="closed-trades">
        <h2 class="title">Recent Trades</h2>
        <table class="table table-hover table-striped tableClosed">
            <thead>
                <tr>
                    <th>Symbol</th>
                    <th>Buy Date</th>
                    <th>$ P/L</th>
                    <th>% P/L</th>
                    <th>NAV</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in recentlyClosedTradesVM)
                {
                    <tr>
                        <td class="fw-bold">@r.StockSymbol</td>
                        <td>@r.BuyDate?.ToString("MM/dd/yy")</td>
                        <td class="fw-bold" style="color: @GetColor(r.DollarPnl)">@r.DollarPnl?.ToString("C")</td>
                        <td class="fw-bold" style="color: @GetColor(r.PercentPnl)">@r.PercentPnl?.ToString("P")</td>
                        <td class="fw-bold">@r.Nav?.ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
}
else
{
    <div class="text-center">
        <img src="/images/infinityLoading.gif">
    </div>
}


@code {
    public List<RecentlyClosedTradesViewModel> recentlyClosedTradesVM = new List<RecentlyClosedTradesViewModel>();

    // public List<TradesWithPnlViewModel> tradesWithPnlVM = new List<TradesWithPnlViewModel>();

    public List<PositionsViewModel> positionsVM = new List<PositionsViewModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadPositions();
            await LoadRecentlyClosed();     
        }
    }

    private async Task LoadRecentlyClosed()
    {
        recentlyClosedTradesVM = await tradeService.GetRecentlyClosed();
        StateHasChanged();
    }

    private async Task LoadPositions()
    {
        positionsVM = await tradeService.GetPositions();
        StateHasChanged();
    }

    public string GetColor(decimal? value)
    {
        return value >= 0 ? "green" : "red";
    }
}

