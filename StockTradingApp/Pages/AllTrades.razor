@page "/trades"
@page "/tradeform/{pTradeId:int?}"
@using Services;
@using Data;
@inject ITradeService tradeService
@inject ITransactionService transactionService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext
@inject IModalService Modal


<style>
    .modalBackdrop {
        height: 100vh;
        width: 100vw;
        background-color: rgba(0,0,0,0.6);
    }

    .tableRound {
        border-radius: 10px;
        border: 1px solid #2B3449; /* Use border shorthand to set color and width */
        padding: 10px;
        width: 60%;
        background-color: #EAECF1;
    }
</style>

@if (tradeList.Any())
{
    @if(ShowNewTrade)
    {
        <div class="m-lg-2">
            <span style="color: white;">Enter Stock Symbol:</span><br/>
            <input type="text" @bind-value="trade.StockSymbol">
            <button class="btn btn-success btn-md" @onclick="AddNewTrade">Add</button>
            <button class="btn btn-danger btn-md" @onclick="CloseAdd">Cancel</button>
        </div>
    }
    else
    {
        <button class="btn btn-success" @onclick="OnAdd">Initiate New Trade</button>
        <button class="btn btn-primary" @onclick="OnEdit">View Transactions</button>
    }
    <br>
    <br>
    <div class=" table-responsive ">
        <table class="table table-striped table-hover tableRound">
            <thead>
                <tr>
                    <th>Trade ID</th>
                    <th>Stock Symbol</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trade in tradeList)
                {
                    <tr>
                        <td>@trade.TradeId</td>
                        <td class="fw-bold">@trade.StockSymbol</td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => OnAddTransaction(trade.TradeId, trade.StockSymbol)"><i class="fa fa-plus"></i></button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDelete(trade.TradeId)"><i class="fa fa-minus"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="text-center">
        <img src="/images/smallLoading.gif">
    </div>
}


@if (Show)
{
    <div class="modal fade show d-block">
        <div class="modal-dialog-centered modalBackdrop">
            <div class="modal-content modal-dialog">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">@title Transaction</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => CloseModal())"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="transaction" OnValidSubmit="HandleNewSubmit">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ValidationSummary></ValidationSummary>
                        <div class="form-group">
                            <label for="TradeId">Trade Id</label>
                            <InputNumber class="form-control" @bind-Value="transaction.TradeId" readonly="true"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="StockSymbol">Stock Symbol</label>
                            <InputText class="form-control" @bind-Value="transaction.StockSymbol" readonly = "true"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="EntryPrice">Entry Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesEntered">Number Shares Entered</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="EntryDate">Entry Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                        </div>
                        <div class="form-group">
                            <label for="SellPrice">Exit Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesExited">Number Shares Exited</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="ExitDate">Exit Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                        </div><br />
                        <button type="submit" class="btn-primary btn-sm">Update</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@if (ShowDeleteModal)
{
    <div class="modal fade show d-block">
        <div class="modal-dialog-centered modalBackdrop">
            <div class="modal-content modal-dialog">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Are you sure?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => CloseDeleteModal())"></button>
                </div>
                <div class="modal-body">
                    <p>This will permanently delete all transactions for the selected trade.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary">Yes, I'm sure</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Go Back</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    public bool isLoading { get; set; } = true;

    private List<Trade> tradeList = new List<Trade>();

    private List<Transaction> transactionList = new List<Transaction>();

    public Trade trade { get; set; } = new Trade();

    public Transaction transaction { get; set; } = new Transaction();

    private bool Show { get; set; } = false;

    private bool ShowNewTrade { get; set; } = false;

    private bool ShowDeleteModal { get; set; } = false;

    [Parameter]
    public int? pTradeId { get; set; }

    public string title = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadTrades();
        }
    }

    private async Task LoadTrades()
    {
        tradeList = await tradeService.GetAllTrades();
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadTransactions()
    {
        transactionList = await transactionService.GetAllTransactions();
        isLoading = false;
        StateHasChanged();
    }

    private void OnAdd()
    {
        ShowNewTrade = true;
    }

    private async Task AddNewTrade()
    {
        tradeService.AddTrade(trade);
        dbContext.SaveChanges();
        StateHasChanged();
        await LoadTrades();
        ShowNewTrade = false;
        trade = new Trade();
    }

    private void OnAddTransaction(int pTradeId, string StockSymbol)
    {
        title = "Add";
        Show = true;
        trade.TradeId = pTradeId;
        trade.StockSymbol = StockSymbol;
        transaction = new Transaction { TradeId = trade.TradeId, StockSymbol = trade.StockSymbol};
        trade = new Trade();
    }

    private async Task OnDelete(int TradeId)
    {

        tradeService.DeleteTrade(TradeId);
        tradeList = await tradeService.GetAllTrades();
        ShowDeleteModal = true;
    }

    private void OnEdit()
    {
        // title = "Edit";
        // Show = true;
        // trade.TradeId = pTradeId;
        // //trade = tradeService.GetTradeById(pTradeId);
        NavigationManager.NavigateTo("/combined");

    }

    private async void HandleValidTradeSubmit() //TODO: show updated table when clicking update
    {
        if (trade.TradeId == 0)
        {
            tradeService.AddTrade(trade);
        }
        else
        {
            tradeService.UpdateTrade(trade);
        }
        dbContext.SaveChanges();
        ShowNewTrade = false;
        StateHasChanged();
        transactionList = await transactionService.GetAllTransactions();
    }

    private async void HandleNewSubmit()
    {
        if (transaction.TransactionId == 0 || transaction.TransactionId == null)
        {
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        NavigationManager.NavigateTo("/combined");
        dbContext.SaveChanges();
        transactionList = await transactionService.GetAllTransactions();
    }

    private void CloseModal()
    {
        Show = false;
    }

    private void CloseAdd()
    {
        ShowNewTrade = false;
    }

    private void CloseDeleteModal()
    {
        ShowDeleteModal = false;
    }
}
