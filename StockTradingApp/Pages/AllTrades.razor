@page "/trades"
@page "/tradeform/{pTradeId:int?}"
@using Services;
@using Data;
@using StockTradingApp.Pages.Components;
@using StockTradingApp.Services.Interfaces;
@inject ITradeService tradeService
@inject ITransactionService transactionService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext
@inject IModalService Modal
@inject IJSRuntime JSRuntime


<style>
    .modalBackdrop {
        height: 100vh;
        width: 100vw;
        background-color: rgba(0,0,0,0.6);
    }

    .tableRound {
        border-radius: 10px;
        padding: 10px;
        width: 75%;
        background-color: #EAECF1;
        text-align: center;
    }

    .btnFloat {
        width: 20%;
    }
    
    .custom-nav {
        width: 75%;
    }

    .add-trade-border {
        border-radius: 10px;
        width: 25%;
        background-color: #444E65;
    }
</style>

<SearchTradeComponent OnSearchTrade="OnTradeSearch"></SearchTradeComponent>

@if (tradeList.Any())
{
    <br/>
    <div class=" table-responsive ">
        <table class="table table-striped table-hover tableRound">
            <thead>
                <tr>
                    <th>Trade ID</th>
                    <th class="text-wrap">Symbol</th>
                    <th>Cost Basis</th>
                    <th class="text-wrap"># Shares</th>
                    <th>Buy Date</th>
                    <th>Stop/Loss $</th>
                    <th>Sell Price</th>
                    <th># Shares</th>
                    <th>Sell Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trade in tradeList)
                {
                    <tr>
                        <td>@trade.TradeId</td>
                        <td class="fw-bold">@trade.StockSymbol</td>
                        <td>@(trade.BuyPrice.HasValue ? trade.BuyPrice.Value.ToString("C") : string.Empty)</td>
                        <td>@trade.NumberSharesBought</td>
                        <td>@(trade.ShareBuyDate.HasValue ? trade.ShareBuyDate.Value.ToString("MM/dd/yy") : string.Empty)</td>
                        <td>@(trade.DollarStopLoss.HasValue ? trade.DollarStopLoss.Value.ToString("C") : string.Empty)</td>
                        <td>@(trade.SellPrice.HasValue ? trade.SellPrice.Value.ToString("C") : string.Empty)</td>
                        <td>@trade.NumberSharesSold</td>
                        <td>@(trade.ShareSellDate.HasValue ? trade.ShareSellDate.Value.ToString("MM/dd/yy") : string.Empty)</td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => OnAddTransaction(trade.TradeId)"><i class="fa fa-plus"></i></button>
                            <button class="btn btn-danger btn-sm" @onclick="()=>DeleteAlert(trade.TradeId)"><i class="fa fa-minus"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="text-center">
        <img src="/images/infinityLoading.gif">
    </div>
}


@if (ShowNewTradeModal)
{
    <div class="modal fade show d-block">
        <div class="modal-dialog-centered modalBackdrop">
            <div class="modal-content modal-dialog">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">@title Transaction</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => CancelAddNewTrade())"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="transaction" OnValidSubmit="HandleNewSubmit">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ValidationSummary></ValidationSummary>
                        <div class="form-group">
                            <label for="TradeId">Trade Id</label>
                            <InputNumber class="form-control" @bind-Value="transaction.TradeId" readonly="true"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="StockSymbol">Stock Symbol</label>
                            <InputText class="form-control" @bind-Value="transaction.StockSymbol"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="EntryPrice">Entry Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesEntered">Number Shares Entered</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="EntryDate">Entry Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                        </div>
                        <div class="form-group">
                            <label for="SellPrice">Exit Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesExited">Number Shares Exited</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="ExitDate">Exit Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                        </div><br />
                        <button type="submit" class="btn-primary btn-sm">Update</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@if (ShowDeleteModal)
{
    <div class="modal fade show d-block">
        <div class="modal-dialog-centered modalBackdrop">
            <div class="modal-content modal-dialog">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Are you sure?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>This will permanently delete all transactions for <b>Trade @trade.TradeId</b></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="()=>OnDelete(Convert.ToInt32(trade.TradeId))">Yes, I'm sure</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDeleteModal">Go Back</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    public bool isLoading { get; set; } = true;

    private List<Trade> tradeList = new List<Trade>();

    private List<Transaction> transactionList = new List<Transaction>();

    public Trade trade { get; set; } = new Trade();

    public Transaction transaction { get; set; } = new Transaction();


    private bool ShowNewTradeModal { get; set; } = false;

    private bool ShowDeleteModal { get; set; } = false;

    [Parameter]
    public int? pTradeId { get; set; }

    public string title = "";

    private string stockSymbol = string.Empty;

    private string searchTerm = string.Empty;

    private void OnTradeSearch(string searchTerm)
    {
        this.searchTerm = searchTerm;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTrades(searchTerm);
        }
        await LoadExistingTrades(searchTerm);
    }

    private async Task LoadTrades(string searchTerm)
    {
        this.searchTerm = searchTerm;
        tradeList = await tradeService.GetAllTrades();
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadExistingTrades(string searchTerm)
    {
        this.searchTerm = searchTerm;
        if(string.IsNullOrEmpty(searchTerm))
        {
            tradeList = await tradeService.GetAllExistingTrades();
        }
        else
        {
            tradeList = tradeService.GetTradeBySymbol(searchTerm);
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadTransactions()
    {
        transactionList = await transactionService.GetAllTransactions();
        isLoading = false;
        StateHasChanged();
    }

    private async Task AddNewTrade()
    {
        tradeService.AddTrade(trade);
        StateHasChanged();
        await LoadExistingTrades(searchTerm);
        await OnAddTransaction(trade.TradeId);

    }

    private async Task OnAddTransaction(int pTradeId)
    {
        title = "Add";
        ShowNewTradeModal = true;
        trade.TradeId = pTradeId;
        transaction = new Transaction { TradeId = trade.TradeId};
        trade = new Trade();
    }

    private async Task OnDelete(int TradeId)
    {
        tradeService.DeleteTrade(TradeId);
        tradeList = await tradeService.GetAllTrades();
        ShowDeleteModal = false;
    }

    private void OnEdit()
    {
        NavigationManager.NavigateTo("/combined");
    }

    private async void HandleValidTradeSubmit() //TODO: show updated table when clicking update
    {
        if (trade.TradeId == 0)
        {
            tradeService.AddTrade(trade);
        }
        else
        {
            tradeService.UpdateTrade(trade);
        }
        dbContext.SaveChanges();
        StateHasChanged();
        transactionList = await transactionService.GetAllTransactions();
    }

    private async void HandleNewSubmit()
    {
        if (transaction.TransactionId == 0 || transaction.TransactionId == null)
        {
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        ShowNewTradeModal = false;
        dbContext.SaveChanges();
        transactionList = await transactionService.GetAllTransactions();
        await ToastrSuccess();
    }

    private void CancelAddNewTrade()
    {
        tradeService.RemoveRecentTrade();
        ShowNewTradeModal = false;
        trade = new Trade();
    }

    private void CloseDeleteModal()
    {

        ShowDeleteModal = false;
    }

    private void DeleteAlert(int pTradeId)
    {
        trade.TradeId = pTradeId;
        ShowDeleteModal = true;
    }

    private async Task ToastrSuccess()
    {
        await JSRuntime.InvokeVoidAsync("ShowToastr", "success", "Success"); 
    }

}

