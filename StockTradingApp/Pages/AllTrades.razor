@page "/trades"
@page "/tradeform/{pTradeId:int?}"
@using Services;
@using Data;
@inject ITradeService tradeService
@inject ITransactionService transactionService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext
@inject IModalService Modal


@if (tradeList.Any())
{
        <button class="btn btn-success" @onclick="OnAdd">Initiate New Trade</button>
        <button class="btn btn-primary" @onclick="OnEdit">View Transactions</button>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Trade ID</th>
                        <th>Stock Symbol</th>
                        <th>Buy Price</th>
                        <th># Shares Bought</th>
                        <th>Share Buy Date</th>
                        <th>Dollar Stop Loss</th>
                        <th>Sell Price</th>
                        <th># Shares Sold</th>
                        <th>Share Sell Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var trade in tradeList)
                    {
                        <tr>
                            <td>@trade.TradeId</td>
                            <td>@trade.StockSymbol</td>
                            <td>@trade.BuyPrice</td>
                            <td>@trade.NumberSharesBought</td>
                            <td>@trade.ShareBuyDate</td>
                            <td>@trade.DollarStopLoss</td>
                            <td>@trade.SellPrice</td>
                            <td>@trade.NumberSharesSold</td>
                            <td>@trade.ShareSellDate</td>
                            <td>
                                 <button class="btn btn-success btn-sm" @onclick="()=>OnAddTransaction(trade.TradeId)">Add</button> 
                                <button class="btn btn-danger btn-sm" @onclick="() => OnDelete(trade.TradeId)">Delete</button>
                            </td>
                        </tr>
                    } 
                </tbody>
            </table>
        </div>

    @if (ShowNewTrade)
    {
        <div class="modal fade show d-block" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">@title Trade</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => CloseEditModal())"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="trade" OnValidSubmit="HandleValidTradeSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <ValidationSummary></ValidationSummary>
                            <div class="form-group">
                                <label for="StockSymbol">Stock Symbol</label>
                                <InputText class="form-control" @bind-Value="trade.StockSymbol"></InputText>
                            </div>
                            <div class="form-group">
                                <label for="BuyPrice">BuyPrice</label>
                                <InputNumber class="form-control" @bind-Value="trade.BuyPrice"></InputNumber>
                            </div>
                            <div class="form-group">
                                <label for="NumberSharesBought">NumberSharesBought</label>
                                <InputNumber class="form-control" @bind-Value="trade.NumberSharesBought"></InputNumber>
                            </div>
                            <div class="form-group">
                                <label for="ShareBuyDate">ShareBuyDate</label>
                                <InputDate class="form-control" @bind-Value="trade.ShareBuyDate"></InputDate>
                            </div>
                            <div class="form-group">
                                <label for="DollarStopLoss">DollarStopLoss</label>
                                <InputNumber class="form-control" @bind-Value="trade.DollarStopLoss"></InputNumber>
                            </div>
                            <div class="form-group">
                                <label for="SellPrice">SellPrice</label>
                                <InputNumber class="form-control" @bind-Value="trade.SellPrice"></InputNumber>
                            </div>
                            <div class="form-group">
                                <label for="NumberSharesSold">NumberSharesSold</label>
                                <InputNumber class="form-control" @bind-Value="trade.NumberSharesSold"></InputNumber>
                            </div>
                            <div class="form-group">
                                <label for="ShareSellDate">ShareSellDate</label>
                                <InputDate class="form-control" @bind-Value="trade.ShareSellDate"></InputDate>
                            </div><br />
                            <button type="submit" class="btn-primary btn-sm">Update</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div> 
    }
}
else
{
    <div class="text-center">
        <img src="/images/smallLoading.gif">
    </div>
}


@if (Show)
{
        <div class="modal fade show d-block" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">@title Transaction</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => CloseModal())"></button>
                    </div>
                    <div class="modal-body">
            <EditForm Model="transaction" OnValidSubmit="HandleNewSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="form-group">
                    <label for="TradeId">Trade Id</label>
                    <InputNumber class="form-control" @bind-Value="transaction.TradeId" readonly="true"></InputNumber>
                </div>
                <div class="form-group">
                    <label for="StockSymbol">Stock Symbol</label>
                    <InputText class="form-control" @bind-Value="transaction.StockSymbol"></InputText>
                </div>
                <div class="form-group">
                    <label for="EntryPrice">Entry Price</label>
                    <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                </div>
                <div class="form-group">
                    <label for="NumberSharesEntered">Number Shares Entered</label>
                    <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                </div>
                <div class="form-group">
                    <label for="EntryDate">Entry Date</label>
                    <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                </div>
                <div class="form-group">
                    <label for="SellPrice">Exit Price</label>
                    <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                </div>
                <div class="form-group">
                    <label for="NumberSharesExited">Number Shares Exited</label>
                    <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                </div>
                <div class="form-group">
                    <label for="ExitDate">Exit Date</label>
                    <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                </div><br />
                <button type="submit" class="btn-primary btn-sm">Update</button>
            </EditForm>
                </div>
            </div>
        </div>
    </div>
}



@code {
    public bool isLoading { get; set; } = true;


    private List<Trade> tradeList = new List<Trade>();

    private List<Transaction> transactionList = new List<Transaction>();

    public Trade trade { get; set; } = new Trade();

    public Transaction transaction { get; set; } = new Transaction();

    private bool Show { get; set; } = false;

    private bool ShowNewTrade { get; set; } = false;

    [Parameter]
    public int? pTradeId { get; set; }

    public string title = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadTrades();
        }
    }

    private async Task LoadTrades()
    {
        tradeList = await tradeService.GetAllTrades();
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadTransactions()
    {
        transactionList = await transactionService.GetAllTransactions();
        isLoading = false;
        StateHasChanged();
    }

    private void OnAdd()
    {
        ShowNewTrade = true;
        title = "Initiate New";
        pTradeId = 0;
        trade = new Trade();
    }

    private void OnAddTransaction(int pTradeId)
    {
        title = "Add";
        Show = true;
        trade.TradeId = pTradeId;
        transaction = new Transaction {TradeId = trade.TradeId };
    }

    private async void OnDelete(int TradeId)
    {
        tradeService.DeleteTrade(TradeId);
        tradeList = await tradeService.GetAllTrades();
    }

    private void OnEdit()
    {
        // title = "Edit";
        // Show = true;
        // trade.TradeId = pTradeId;
        // //trade = tradeService.GetTradeById(pTradeId);
        NavigationManager.NavigateTo("/combined");

    }

    private async void HandleValidTradeSubmit() //TODO: show updated table when clicking update
    {
        if (trade.TradeId == 0)
        {
            tradeService.AddTrade(trade);
        }
        else
        {
            tradeService.UpdateTrade(trade);
        }
        dbContext.SaveChanges();
        ShowNewTrade = false;
        StateHasChanged();
        transactionList = await transactionService.GetAllTransactions();
    }

    private async void HandleNewSubmit()
    {
        if (transaction.TransactionId == 0 || transaction.TransactionId == null)
        {
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        NavigationManager.NavigateTo("/transactions");
        dbContext.SaveChanges();
        transactionList = await transactionService.GetAllTransactions();
    }

    private void CloseModal()
    {
        Show = false;
    }

    private void CloseEditModal()
    {
        ShowNewTrade = false;
    }
}
