@page "/combined"
@page "/combinedform/{pTradeId:int?}"
@page "/combinedform/{pTradeId:int?}/{pTransactionId:int?}"
@using Services;
@using Data;
@inject ITradeService tradeService
@inject ITransactionService transactionService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext


@if (tradeList.Any())
{
    @if (pTradeId == null)
    {
        <a href="combinedform/0" class="btn btn-success" @onclick="OnAdd">New Trade</a>

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Trade ID</th>
                    <th>Stock Symbol</th>
                    <th># Transactions</th>
                    <th>Buy Price</th>
                    <th># Shares Bought</th>
                    <th>Share Buy Date</th>
                    <th>Dollar Stop Loss</th>
                    <th>Sell Price</th>
                    <th># Shares Sold</th>
                    <th>Share Sell Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trade in tradeList)
                {
                    <tr>
                        <td>@trade.TradeId</td>
                        <td>@trade.StockSymbol</td>
                        <td>@trade.TradeId</td>
                        <td>@trade.BuyPrice</td>
                        <td>@trade.NumberSharesBought</td>
                        <td>@trade.ShareBuyDate</td>
                        <td>@trade.DollarStopLoss</td>
                        <td>@trade.SellPrice</td>
                        <td>@trade.NumberSharesSold</td>
                        <td>@trade.ShareSellDate</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => OnShowTransactions(trade.TradeId)">Modify Transactions</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDelete(trade.TradeId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h3>Transactions</h3>

        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Trade ID</th>
                    <th>Stock Symbol</th>
                    <th>Entry Price</th>
                    <th># Shares Entered</th>
                    <th>Entry Date</th>
                    <th>Exit Price</th>
                    <th># Shares Exited</th>
                    <th>Exit Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trans in transactionList)
                {
                    <tr>
                        <td>@trans.TransactionId</td>
                        <td>@trans.TradeId</td>
                        <td>@trans.StockSymbol</td>
                        <td>@trans.EntryPrice</td>
                        <td>@trans.NumberSharesEntered</td>
                        <td>@trans.EntryDate</td>
                        <td>@trans.SellPrice</td>
                        <td>@trans.NumberSharesExited</td>
                        <td>@trans.ExitDate</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => OnEdit(trans.TradeId, trans.TransactionId)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDelete(trade.TradeId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div>
            <button class="btn btn-success" @onclick="NewTransaction">New Transaction</button>
        </div>

        <h3>@title Transaction</h3>
        <div class="row">
            <div class="col-sm-2">
                <EditForm Model="transaction" OnValidSubmit="()=>HandleValidSubmit(transaction.TradeId)">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="form-group">
                        <label for="TradeId">Trade Id</label>
                        <InputNumber class="form-control" @bind-Value="transaction.TradeId"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="StockSymbol">Stock Symbol</label>
                        <InputText class="form-control" @bind-Value="transaction.StockSymbol"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="EntryPrice">Entry Price</label>
                        <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="NumberSharesEntered">Number Shares Entered</label>
                        <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="EntryDate">Entry Date</label>
                        <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                    </div>
                    <div class="form-group">
                        <label for="SellPrice">Exit Price</label>
                        <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="NumberSharesExited">Number Shares Exited</label>
                        <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="ExitDate">Exit Date</label>
                        <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                    </div><br />
                    <button type="submit" class="btn-primary btn-sm">Update</button>
                </EditForm>
            </div>
        </div>

    }
}
else
{
    <div class="text-center">
        <img src="/images/smallLoading.gif">
    </div>
}



@code {
    public bool isLoading { get; set; } = true;

    private List<Trade> tradeList = new List<Trade>();

    private List<Transaction> transactionList = new List<Transaction>();

    public Trade trade { get; set; } = new Trade();

    public Transaction transaction { get; set; } = new Transaction();

    [Parameter]
    public int? pTradeId { get; set; }

    [Parameter]
    public int? pTransactionId { get; set; }

    public string title = "Add";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadTrades();
        }
    }

    private async Task LoadTrades()
    {
        tradeList = await tradeService.GetAllTrades();
        isLoading = false;
        StateHasChanged();
    }

    private void OnAdd()
    {
        trade = new Trade();
    }

    private async void OnDelete(int TradeId)
    {
        tradeService.DeleteTrade(TradeId);
        tradeList = await tradeService.GetAllTrades();
    }

    private void OnEdit(int pTradeId, int pTransactionId)
    {
        if(pTransactionId > 0)
        {
            title = "Edit";
            transaction = transactionService.GetTransactionById(pTransactionId);
            NavigationManager.NavigateTo($"/combinedform/{pTradeId}/{pTransactionId}");
        }

    }

    private async void HandleValidSubmit(int pTradeId)
    {
        if(transaction.TransactionId == 0)
        {
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        dbContext.SaveChanges();
        transactionList = await transactionService.GetTransactionByTradeId(pTradeId);
        NavigationManager.NavigateTo($"/combinedform/{pTradeId}");

    }

    private async Task OnShowTransactions(int pTradeId)
    {
        transaction = new Transaction();
        transactionList = await transactionService.GetTransactionByTradeId(pTradeId);
        NavigationManager.NavigateTo($"/combinedform/{pTradeId}");
    }

    private void NewTransaction()
    {
        transaction = new Transaction();
    }
}

