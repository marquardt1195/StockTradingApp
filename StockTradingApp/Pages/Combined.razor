@page "/combined"
@page "/combinedform/{pTradeId:int?}"
@page "/combinedform/{pTradeId:int?}/{pTransactionId:int?}"
@using Services;
@using Data;
@using Data.ViewModels;
@inject ITradeService tradeService
@inject ITransactionService transactionService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext


@if (transactionList.Any())
{
    @if (pTradeId == null)  //Only show Trade table, unless pTradeId is present.
    {
        <a href="combinedform/0" class="btn btn-success" @onclick="NewTransaction">Initiate New Trade</a>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Trade ID</th>
                    <th>Stock Symbol</th>
                    <th># Transactions</th>
                    <th>Buy Price</th>
                    <th># Shares Bought</th>
                    <th>Share Buy Date</th>
                    <th>Dollar Stop Loss</th>
                    <th>Sell Price</th>
                    <th># Shares Sold</th>
                    <th>Share Sell Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trans in transactionList.GroupBy(trans => trans.TradeId))
                {
                    <tr>
                        <td>@trans.Key</td>
                        <td>@trans.First().StockSymbol</td>
                        <td>@trans.Count()</td>
                        <td>@trans.Average(trans => trans.EntryPrice)</td>
                        <td>@trans.Sum(trans => trans.NumberSharesEntered)</td>
                        <td>@trans.First().EntryDate</td>
                        <td>@trans.First().EntryPrice</td>  @* stop loss *@
                        <td>@trans.Average(trans => trans.SellPrice)</td>
                        <td>@trans.Sum(trans => trans.NumberSharesExited)</td>
                        <td>@trans.Last().ExitDate</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => OnShowTransactions(trans.Key)">Modify Transactions</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDeleteTrade(trans.Key)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (NewTradeForm)
    {    
        <h3>@title Transaction for Trade @pTradeId</h3>
        <div class="row">
            <div class="col-sm-2">
                <EditForm Model="transaction" OnValidSubmit="()=>HandleValidSubmit(transaction.TradeId, transaction.TransactionId)">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
@*                     <div class="form-group">
                        <label for="TradeId">Trade Id</label>
                        <InputNumber class="form-control" @bind-Value="transaction.TradeId"></InputNumber>
                    </div> *@
                    <div class="form-group">
                        <label for="StockSymbol">Stock Symbol</label>
                        <InputText class="form-control" @bind-Value="transaction.StockSymbol"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="EntryPrice">Entry Price</label>
                        <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="NumberSharesEntered">Number Shares Entered</label>
                        <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="EntryDate">Entry Date</label>
                        <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                    </div>
                    <div class="form-group">
                        <label for="SellPrice">Exit Price</label>
                        <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="NumberSharesExited">Number Shares Exited</label>
                        <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label for="ExitDate">Exit Date</label>
                        <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                    </div><br />
                    <button type="submit" class="btn-primary btn-sm">Update</button>
                </EditForm>
            </div>
        </div>
    } 
    else
    {
        <h3>Transactions for Trade @pTradeId</h3>

        @if (pTransactionId == null)    //Only show transaction table, unless pTransactionId is present.
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Transaction ID</th>
                        <th>Trade ID</th>
                        <th>Stock Symbol</th>
                        <th>Entry Price</th>
                        <th># Shares Entered</th>
                        <th>Entry Date</th>
                        <th>Exit Price</th>
                        <th># Shares Exited</th>
                        <th>Exit Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var trans in transactionList)
                    {
                        <tr>
                            <td>@trans.TransactionId</td>
                            <td>@trans.TradeId</td>
                            <td>@trans.StockSymbol</td>
                            <td>@trans.EntryPrice</td>
                            <td>@trans.NumberSharesEntered</td>
                            <td>@trans.EntryDate</td>
                            <td>@trans.SellPrice</td>
                            <td>@trans.NumberSharesExited</td>
                            <td>@trans.ExitDate</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => OnEdit(trans.TradeId, trans.TransactionId)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => OnDeleteTransaction(trans.TransactionId, trans.TradeId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>      <div>
                <a href="combinedform/@pTradeId/0" class="btn btn-success" @onclick="NewTransaction">New Transaction</a>
            </div>
        }
        else
        {
            <h3>@title Transaction</h3>
            <div class="row">
                <div class="col-sm-2">
                    <EditForm Model="transaction" OnValidSubmit="()=>HandleValidSubmit(transaction.TradeId, transaction.TransactionId)">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ValidationSummary></ValidationSummary>
                        <div class="form-group">
                            <label for="TradeId">Trade Id</label>
                            <InputNumber class="form-control" @bind-Value="transaction.TradeId"></InputNumber>
                        </div> 
                        <div class="form-group">
                            <label for="StockSymbol">Stock Symbol</label>
                            <InputText class="form-control" @bind-Value="transaction.StockSymbol"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="EntryPrice">Entry Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesEntered">Number Shares Entered</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="EntryDate">Entry Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                        </div>
                        <div class="form-group">
                            <label for="SellPrice">Exit Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesExited">Number Shares Exited</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="ExitDate">Exit Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                        </div><br />
                        <button type="submit" class="btn-primary btn-sm">Update</button>
                    </EditForm>
                </div>
            </div>
        }
    }
}
else
{
    <div class="text-center">
        <img src="/images/smallLoading.gif">
    </div>
}



@code {
    public bool isLoading { get; set; } = true;

    private bool NewTradeForm { get; set; } = false;

    private List<Trade> tradeList = new List<Trade>();

    private List<Transaction> transactionList = new List<Transaction>();

    public Trade trade { get; set; } = new Trade();

    public Transaction transaction { get; set; } = new Transaction();

    [Parameter]
    public int? pTradeId { get; set; }

    [Parameter]
    public int? pTransactionId { get; set; }

    [Parameter]
    public int? pNewTradeId { get; set; }

    public string title = "Add";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadTransactions();
        }
    }

    private async Task LoadTrades()
    {
        tradeList = await tradeService.GetAllTrades();
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadTransactions()
    {
        transactionList = await transactionService.GetAllTransactions();
        isLoading = false;
        StateHasChanged();
    }

    private void OnAdd()
    {
        trade = new Trade();
    }

    private async void OnDeleteTransaction(int transactionId, int pTradeId)
    {
        transactionService.DeleteTransaction(transactionId);
        transactionList = await transactionService.GetTransactionByTradeId(pTradeId);
        NavigationManager.NavigateTo($"/combinedform/{pTradeId}");
    }

    private async void OnDeleteTrade(int tradeId)
    {
        tradeService.DeleteTrade(tradeId);
        tradeList = await tradeService.GetAllTrades();
    }

    private void OnEdit(int pTradeId, int pTransactionId)
    {
        if(pTransactionId > 0)
        {
            title = "Edit";
            transaction = transactionService.GetTransactionById(pTransactionId);
            NavigationManager.NavigateTo($"/combinedform/{pTradeId}/{pTransactionId}");
        }

    }

    private async void HandleValidSubmit(int pTradeId, int pTransactionId)
    {
        if(pTransactionId == 0 || pTransactionId == null)
        {
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        dbContext.SaveChanges();
        transactionList = await transactionService.GetTransactionByTradeId(pTradeId);
        NavigationManager.NavigateTo($"/combinedform/{pTradeId}");
    }

    private async void HandleNewTransaction(int pTradeId)
    {
        
    }

    private async Task OnShowTransactions(int pTradeId)
    {
        transaction = new Transaction();
        transactionList = await transactionService.GetTransactionByTradeId(pTradeId);
        NavigationManager.NavigateTo($"/combinedform/{pTradeId}");
    }

    private void NewTransaction()
    {
        if(pTradeId == null || pTradeId == 0)
        {
            NewTradeForm = true;
            title = "New";
            //pTradeId = GetLastTradeId();
        }
        //trade.TradeId = Convert.ToInt32(@pTradeId++);
        transaction = new Transaction();
    }

    private void NewTrade()
    {
        trade = new Trade();
    }

    // private async void HandleNewTrade()
    // {
    //     if (trade.TradeId == 0)
    //     {
    //         transactionService.AddTransaction(transaction);
    //     }
    //     else
    //     {
    //         tradeService.UpdateTrade(trade);
    //     }
    //     dbContext.SaveChanges();
    //     transactionList = await transactionService.GetAllTransactions();
    //     NavigationManager.NavigateTo("/combined");
    // }

     private int GetLastTradeId()
     {
         if (transactionList.Count > 0)
         {
             int maxTradeId = transactionList.Max(transaction => transaction.TradeId);
             return maxTradeId;
         }
         else
         {
             return 0; 
         }
     }

    // public void InitiateNewTrans()
    // {
    //     NewTradeForm = true;
    // }
}

