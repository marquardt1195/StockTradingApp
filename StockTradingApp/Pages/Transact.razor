@page "/transact"
@page "/transactform/{pTradeId:int?}"
@page "/transactform/{pTradeId:int?}/{pTransactionId:int?}"
@using Services;
@using Data;
@using Data.ViewModels;
@using StockTradingApp.Pages.Components;
@using StockTradingApp.Services.Interfaces;
@inject ITradeService tradeService
@inject ITransactionService transactionService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext
@inject IJSRuntime JSRuntime

<style>
    .background {
        background-color: cornflowerblue;
    }

    .table-responsive {
        max-height: 700px;
        border-radius: 10px;
        border: 1px solid gray;
        padding: 10px;
        background-color: #EAECF1;
        width: 80%;
        text-align: center;
    }

    .modalBackdrop {
        height: 100vh;
        background-color: rgba(0,0,0,0.5);
    }

    .trans-title {
        color: white;
    }

    .btnFloat {
        width: 20%;
    }
</style>

<button class="btn btn-lg btn-success btnFloat" @onclick="AddNewTrade"><i class="fa fa-pencil"></i> New Trade</button>
<br />
<br />

@* <SearchTradeComponent OnSearchTrade="OnTradeSearch"></SearchTradeComponent>
 *@

@if (transactionList.Any())
{

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Trade ID</th>
                    <th>Symbol</th>
                    <th># Transactions</th>
                    <th>Entry Price</th>
                    <th># Shares Bought</th>
                    <th>Entry Date</th>
                    <th>Sell Price</th>
                    <th># Shares Sold</th>
                    <th>Sell Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trans in transactionList.GroupBy(trans => trans.TradeId))
                {
                    <tr>
                        <td>@trans.Key</td>
                        <td class="fw-bold">@trans.First().StockSymbol</td>
                        <td>@trans.Count()</td>
                        <td>@(trans.Last().EntryPrice.HasValue ? trans.Last().EntryPrice.Value.ToString("C") : string.Empty)</td>
                        <td>@trans.Sum(trans => trans.NumberSharesEntered)</td>
                        <td>@(trans.First().EntryDate.HasValue ? trans.First().EntryDate.Value.ToString("MM/dd/yy") : trans.Last().EntryDate.Value.ToString("MM/dd/yy"))</td>
                        <td>@(trans.Last().SellPrice.HasValue ? trans.Last().SellPrice.Value.ToString("C") : string.Empty)</td>
                        <td>@trans.Sum(trans => trans.NumberSharesExited)</td>
                        <td>@(trans.First().ExitDate.HasValue ? trans.First().ExitDate.Value.ToString("MM/dd/yy") : string.Empty)</td>
                        <td>
                            <button class="btn btn-secondary btn-sm" @onclick="() => OnShowTransactions(trans.Key)"><i class="fa fa-search"></i></button>
                            <button class="btn btn-success btn-sm" @onclick="() => OnAddTransaction(trans.Key, trans.First().StockSymbol)"><i class="fa fa-plus"></i></button>
                        </td>
                    </tr>
                } 
            </tbody>
        </table>
    </div>
    <br />

    @if (ShowEditTransactionModal)
    {
         <div class="modal fade show d-block" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog-centered modalBackdrop">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">Transactions for Trade @pTradeId</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseEditModal"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-hover table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Transaction ID</th>
                                    <th>Trade ID</th>
                                    <th>Stock Symbol</th>
                                    <th>Entry Price</th>
                                    <th># Shares Entered</th>
                                    <th>Entry Date</th>
                                    <th>Stop Loss</th>
                                    <th>Exit Price</th>
                                    <th># Shares Exited</th>
                                    <th>Exit Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var trans in transactionList)
                                {
                                    <tr>
                                        <td>@trans.TransactionId</td>
                                        <td>@trans.TradeId</td>
                                        <td>@trans.StockSymbol</td>
                                        <td>@trans.EntryPrice</td>
                                        <td>@trans.NumberSharesEntered</td>
                                        <td>@trans.EntryDate</td>
                                        <td>@trans.DollarStopLoss</td>
                                        <td>@trans.SellPrice</td>
                                        <td>@trans.NumberSharesExited</td>
                                        <td>@trans.ExitDate</td>
                                        <td>
                                            <button class="btn btn-primary btn-sm" @onclick="() => OnEdit(trans.TradeId, trans.TransactionId)"><i class="fa fa-pencil"></i></button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => OnClickDeleteTransaction(trans.TransactionId, trans.TradeId)"><i class="fa fa-minus"></i></button>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div> 
    }
}
else
{
    <div class="text-center">
        <img src="/images/infinityLoading.gif">
    </div>
}

@if (Show)
{
    <div class="modal fade show d-block">
        <div class="modal-dialog-centered modalBackdrop">
            <div class="modal-content modal-dialog">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">@title Transaction</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => CloseModal())"></button>
                </div>
                <div class="modal-body">

                    <EditForm Model="transaction" OnValidSubmit="()=>HandleValidSubmit(transaction.TradeId, transaction.TransactionId)">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ValidationSummary></ValidationSummary>
                        <div class="form-group">
                            <label for="TradeId" class="fw-bold">Trade Id</label>
                            <InputNumber class="form-control" @bind-Value="transaction.TradeId" readonly="true"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="StockSymbol" class="fw-bold">Symbol</label>
                            <InputText class="form-control" @bind-Value="transaction.StockSymbol"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="EntryPrice" class="fw-bold">Buy Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.EntryPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesEntered" class="fw-bold">Buy Qty</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesEntered"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="EntryDate" class="fw-bold">Buy Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.EntryDate"></InputDate>
                        </div>
                        <div class="form-group">
                            <label for="DollarStopLoss" class="fw-bold">Stop Loss</label>
                            <InputNumber class="form-control" @bind-Value="transaction.DollarStopLoss"></InputNumber>
                        </div>  
                        <div class="form-group">
                            <label for="SellPrice" class="fw-bold">Sell Price</label>
                            <InputNumber class="form-control" @bind-Value="transaction.SellPrice"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="NumberSharesExited" class="fw-bold">Sell Qty</label>
                            <InputNumber class="form-control" @bind-Value="transaction.NumberSharesExited"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="ExitDate" class="fw-bold">Sell Date</label>
                            <InputDate class="form-control" @bind-Value="transaction.ExitDate"></InputDate>
                        </div><br />
                        <button type="submit" class="btn-primary btn-sm">Update</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowDeleteModal)
{
    <div class="modal fade show d-block">
        <div class="modal-dialog-centered modalBackdrop">
            <div class="modal-content modal-dialog">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Are you sure?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>This will permanently delete this transaction for <b>Trade @transaction.TradeId</b></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="()=>OnDeleteTransaction(transaction.TransactionId)">Yes, I'm sure</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDeleteModal">Go Back</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    public bool isLoading { get; set; } = true;

    private List<Trade> tradeList = new List<Trade>();

    private List<Transaction> transactionList = new List<Transaction>();

    public Trade trade { get; set; } = new Trade();

    public Transaction transaction { get; set; } = new Transaction();

    [Parameter]
    public int? pTradeId { get; set; }

    [Parameter]
    public int? pTransactionId { get; set; }

    [Parameter]
    public int? pNewTradeId { get; set; }

    public string title = "Add";

    public bool Show { get; set; } = false;

    private bool ShowEditTransactionModal { get; set; } = false;

    private bool ShowDeleteModal { get; set; } = false;

    private string searchTerm = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTransactions();
        }
    }

    private async Task LoadTransactions()
    {
        transactionList = await transactionService.GetAllTransactions();
        isLoading = false;
        StateHasChanged();
    }

    private void OnAdd()
    {
        trade = new Trade();
    }

    private async void OnDeleteTransaction(int transactionId)
    {
        transactionService.DeleteTransaction(transactionId);
        ShowDeleteModal = false;
        ShowEditTransactionModal = false;
        await LoadTransactions();
    }


    private void OnEdit(int pTradeId, int pTransactionId)
    {
        if (pTransactionId > 0)
        {
            Show = true;
            title = "Edit";
            transaction = transactionService.GetTransactionById(pTransactionId);
            //NavigationManager.NavigateTo($"/transactform/{pTradeId}/{pTransactionId}");
        }
    }

    private async Task HandleValidSubmit(int pTradeId, int pTransactionId)
    {
        if (pTransactionId == 0 || pTransactionId == null)
        {
            transaction.TradeId = pTradeId;
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        dbContext.SaveChanges();    //once SaveChanges, then transactionId incremented by 1. 0 before this point.
        NavigationManager.NavigateTo($"/transactform");
        transactionList = await transactionService.GetTransactionByTradeId(pTradeId);
        StateHasChanged();
        await LoadTransactions();
        Show = false;
        ShowEditTransactionModal = false;
        await JSRuntime.InvokeVoidAsync("ShowToastr", "success1", "Success");

    }

    public async Task OnShowTransactions(int pTradeId)
    {
        ShowEditTransactionModal = true;
        transaction = new Transaction();
        transaction.TradeId = pTradeId;
        transactionList = await transactionService.GetTransactionByTradeId(pTradeId);
        StateHasChanged();
        // await LoadTransactions();
    }


    // private void NewTrade()
    // {
    //     trade = new Trade();
    // }

    private void OnAddTransaction(int pTradeId, string pStockSymbol)
    {
        title = "Add New";
        Show = true;
        trade.TradeId = pTradeId;
        trade.StockSymbol = pStockSymbol;
        transaction = new Transaction { TradeId = trade.TradeId, StockSymbol = trade.StockSymbol };
        trade = new Trade();
    }

    private async Task CloseModal()
    {
        if (String.IsNullOrEmpty(transaction.StockSymbol) && transaction.TransactionId == 0)
        {
            tradeService.RemoveRecentTrade();
        }
        Show = false;
        StateHasChanged();
        await transactionService.GetTransactionByTradeId(transaction.TradeId);
    }

    private async void HandleNewSubmit()
    {
        if (transaction.TransactionId == 0 || transaction.TransactionId == null)
        {
            transactionService.AddTransaction(transaction);
        }
        else
        {
            transactionService.UpdateTransaction(transaction);
        }
        NavigationManager.NavigateTo("/transactions");
        dbContext.SaveChanges();
        transactionList = await transactionService.GetAllTransactions();
    }

    private void OnNewTransaction()
    {
        title = "New";
        Show = true;
        transaction = new Transaction();
    }

    private async Task CloseEditModal()
    {
        ShowEditTransactionModal = false;
        StateHasChanged();
        await LoadTransactions();
    }

    private void CloseDeleteModal()
    {
        ShowDeleteModal = false;
    }

    private void OnClickDeleteTransaction(int transactionId, int pTradeId)
    {
        ShowDeleteModal = true;
        transaction.TransactionId = transactionId;
        transaction.TradeId = pTradeId;
    }


    private async Task AddNewTrade()
    {
        tradeService.AddTrade(trade);
        StateHasChanged();
        await LoadExistingTrades(searchTerm);
        await OnAddTransaction(trade.TradeId);

    }

    private async Task OnAddTransaction(int pTradeId)
    {
        title = "Add";
        Show = true;
        trade.TradeId = pTradeId;
        transaction = new Transaction { TradeId = trade.TradeId };
        trade = new Trade();
    }

    private async Task LoadExistingTrades(string searchTerm)
    {
        this.searchTerm = searchTerm;
        if (string.IsNullOrEmpty(searchTerm))
        {
            tradeList = await tradeService.GetAllExistingTrades();
        }
        else
        {
            tradeList = tradeService.GetTradeBySymbol(searchTerm);
        }
        isLoading = false;
        StateHasChanged();
    }

    // private void OnTradeSearch(string searchTerm)
    // {
    //     this.searchTerm = searchTerm;
    // }
}

